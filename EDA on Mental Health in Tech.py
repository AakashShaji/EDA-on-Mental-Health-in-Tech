# -*- coding: utf-8 -*-
"""Charts in Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/charts.ipynb
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import plotly.express as px
import warnings
warnings.filterwarnings("ignore")

pd.set_option('display.float_format', lambda x : '%.2f' %x)

data = pd.read_csv("survey.csv")
data.head()

data.shape

data.info()

data.describe()

data[data['Age']<18]

data[data['Age']>75]

#we can address this issue similarly to how we handle missing values, by replacing them with the mean or median according to the data.
data.shape[0]-data.count()

#Percentage of missing values.
100*((data.shape[0]-data.count())/data.shape[0])

data_missing = pd.DataFrame(index = data.columns.values)

data_missing['Null'] = data.isnull().sum().values
data_missing

data['Country'].value_counts()

data[data['Country'] == 'United States']['state'].value_counts().head()

data[data['Country'] != 'United States']

##Percentage of data outside of the United States
100 * (data[data['Country'] != 'United States'].shape[0] / data.shape[0])

data['self_employed'].value_counts()

data['work_interfere'].value_counts()

data['Gender'].value_counts()

"""**Data Pre Processing**"""

#Performing the above mentioned corrections for the Missing values
data['self_employed'].mode()[0]

data['self_employed'] = data['self_employed'].replace(np.nan, data['self_employed'].mode()[0])
data['work_interfere'] = data['work_interfere'].replace(np.nan, data['work_interfere'].mode()[0])

data.drop(['state','comments'], axis=1, inplace = True)

#Lets verify the integrity of missing values again.
100*((data.shape[0]-data.count())/data.shape[0])

#Lets check for any duplicated values
data.duplicated().any()

#We need to address the concerns present in the Age & Gender fields.
#unique values in the Gender field

print('Unique Genders present in the data :', data['Gender'].nunique())
print('Unique Genders present in the data :', set(data['Gender']))

data['Gender'].str.lower().unique()

unique_gender = data['Gender'].str.lower().unique()

# Stratas of Gender category
male_str = ["male", "m", "male-ish", "maile", "mal", "male (cis)", "make",
            "male ", "man","msle", "mail", "malr","cis man", "Cis Male",
            "cis male"]
trans_str = ["trans-female", "something kinda male?", "queer/she/they",
             "non-binary","nah", "all", "enby", "fluid", "genderqueer",
             "androgyne", "agender", "male leaning androgynous", "guy (-ish) ^_^",
             "trans woman", "neuter", "female (trans)", "queer",
             "ostensibly male, unsure what that really means"]
female_str = ["cis female", "f", "female", "woman",  "femake", "female ",
              "cis-female/femme", "female (cis)", "femail"]

# Iterate over rows and replace the inconsistent data with right data
for (row, col) in data.iterrows():
    if str.lower(col['Gender']) in male_str:
        data['Gender'].replace(to_replace=col['Gender'], value='male', inplace=True)

    if str.lower(col['Gender']) in female_str:
        data['Gender'].replace(to_replace=col['Gender'], value='female', inplace=True)

    if str.lower(col['Gender']) in trans_str:
        data['Gender'].replace(to_replace=col['Gender'], value='trans', inplace=True)

# Remove rest of the unnecessary text
stk_list = ['A little about you', 'p']
data = data[~data['Gender'].isin(stk_list)]

# Display the unique value of Gender feature
print(data['Gender'].unique())

"""**Exploratory Data Analysis**"""

#Lets try to plot Age vs Treatment
data['treatment'].value_counts()

fig = plt.figure(figsize=(15, 8))

sns.countplot(x='Age', hue='treatment', data=data)

plt.title(label='Age vs Treatment', size=16)
plt.xlabel(xlabel='Age', size=14)
plt.ylabel(ylabel='Frequency', size=14)
plt.xticks(size=12)
plt.yticks(size=12)
#plt.grid(b=True)

plt.show()

#assosciation between Gender & Treatment ?
figure = plt.figure(figsize=[20, 10])

plt.subplot(1,3,1)
data['treatment'][data['Gender'] == 'male'].value_counts().plot(kind='pie', autopct='%1.1f%%', wedgeprops = dict(width = 0.15), startangle=90)
plt.title(label='Treatment in Males', size=16)

plt.subplot(1,3,2)
data['treatment'][data['Gender'] == 'female'].value_counts().plot.pie(autopct='%1.1f%%',wedgeprops = dict(width = 0.15), startangle=90)
plt.title(label='Treatment in Females', size=16)

plt.subplot(1,3,3)
data['treatment'][data['Gender'] == 'trans'].value_counts().plot.pie(autopct='%1.1f%%', wedgeprops = dict(width = 0.15), startangle=90)
plt.title(label='Treatment in Trans', size=16)

plt.show()



#Top 10 Countries recorded for mental health treatment?
fig = plt.figure(figsize=[15,8])

data['Country'].value_counts().head(10).plot.bar(color='purple')

plt.xticks(rotation='vertical', size=14)
plt.yticks(size=14)
plt.xlabel(xlabel ='Top Countries', size=14)
plt.ylabel(ylabel ='Frequency', size=14)
plt.title(label ='Top 10 countries', size=16)

plt.show()

#countries are actually contributing more for mental health treatment
fig = plt.figure(figsize=[15,8])

data[data['treatment']== 'Yes']['Country'].value_counts().head(10).plot.bar(color='seagreen')

plt.xticks(rotation='vertical', size=14)
plt.yticks(size=14)
plt.xlabel(xlabel ='Top 10 Countries', size=14)
plt.ylabel(ylabel ='Frequency', size=14)
plt.title(label ='Top 10 countries - Treating Mental Health Issues', size=16)

plt.show()

fig = plt.figure(figsize=[15,8])

data[data['treatment']== 'No']['Country'].value_counts().head(10).plot.bar(color='lightcoral')

plt.xticks(rotation='vertical', size=14)
plt.yticks(size=14)
plt.xlabel(xlabel ='Top 10 Countries', size=14)
plt.ylabel(ylabel ='Frequency', size=14)
plt.title(label ='Top 10 countries - Not treating Mental Health Issues', size=16)

plt.show()

